import React, { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { useParams } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { format } from 'date-fns';
import { CalendarIcon, PlusCircle } from 'lucide-react'; // Added PlusCircle icon
import { supabase } from '../../supabaseClient'; // Assuming supabaseClient.ts is in the same directory or adjust path

// Shadcn UI Components
import { Button } from '../../components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '../../components/ui/form';
import { Input } from '../../components/ui/input';
import { Textarea } from '../../components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '../../components/ui/select';
import { Popover, PopoverContent, PopoverTrigger } from '../../components/ui/popover';
import { Calendar } from '../../components/ui/calendar';
import { cn } from '../../lib/utils'; // Utility for conditional class names

// Import the new modal component
import AddPatientModal from './components/AddPatientModal'; // Adjust path as needed

// Define the Zod schema for form validation
const formSchema = z.object({
  // id: z.string().uuid().optional(), // REMOVED: Admission ID
  patient_id: z.string().uuid(), // message handled by form
  status: z.enum(['ADMITTED', 'DISCHARGED']),
  surgery_done: z.string().max(255).optional().or(z.literal('')),
  surgery_done_at: z.coerce.date().optional(),
  remarks: z.string().max(500).optional().or(z.literal('')),
  severity: z.enum([
    'ELECTIVE',
    'STAT',
    'DTOR',
    'RB',
    'POST-OP/MGH',
    'THOC',
    'TOS',
    'HAMA',
    'EXPIRED'
  ]),
  chief_complaint: z.string().min(1, 'Chief complaint is required.').max(500),
  nature_of_injury: z.string().max(500).optional().or(z.literal('')),
  date_of_injury: z.date(),
  time_of_injury: z.string().regex(/^([01]\d|2[0-3]):([0-5]\d)$/, 'Invalid time format (HH:MM)').optional().or(z.literal('')),
  place_of_injury: z.string().max(255).optional().or(z.literal('')),
  history_of_present_illness: z.string().max(1000).optional().or(z.literal('')),
  past_medical_history: z.string().max(1000).optional().or(z.literal('')),
  personal_social_history: z.string().max(1000).optional().or(z.literal('')),
  obstetric_gynecologic_history: z.string().max(1000).optional().or(z.literal('')),
  blood_pressure: z.string().max(20).optional().or(z.literal('')),
  hr: z.coerce.number().int().min(1, 'HR must be a positive integer.').max(300).optional(),
  spo2: z.coerce.number().int().min(0, 'SpO2 must be a non-negative integer.').max(100).optional(),
  temperature: z.coerce.number().min(20, 'Temperature seems too low.').max(50, 'Temperature seems too high.').optional(),
  physical_examination: z.string().max(2000).optional().or(z.literal('')),
  imaging_findings: z.string().max(1000).optional().or(z.literal('')),
  laboratory: z.string().max(1000).optional().or(z.literal('')),
  diagnosis: z.string().max(1000).optional().or(z.literal('')),
  initial_management: z.string().max(1000).optional().or(z.literal('')),
  surgical_plan: z.string().max(1000).optional().or(z.literal('')),
  created_at: z.string().optional(), // Timestamp, typically generated by backend
});

// Define Patient interface
interface Patient {
  id: string;
  first_name: string;
  last_name: string;
  hospital_registration_number?: string | null;
}

// Removed Admission interface. Use z.infer<typeof formSchema> throughout.

export default function UpdateAdmission() {
  const { id } = useParams<{ id: string }>();
  const [admission, setAdmission] = useState<z.infer<typeof formSchema> | null>(null);
  const [patients, setPatients] = useState<Patient[]>([]);
  const [selectedPatient, setSelectedPatient] = useState<Patient>();
  const [isAddPatientModalOpen, setIsAddPatientModalOpen] = useState(false);
  // 1. Define your form.
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      patient_id: '',
      status: 'admitted',
      surgery_done: '',
      surgery_done_at: undefined,
      remarks: '',
      severity: 'ELECTIVE',
      chief_complaint: '',
      nature_of_injury: '',
      date_of_injury: new Date(),
      time_of_injury: '',
      place_of_injury: '',
      history_of_present_illness: '',
      past_medical_history: '',
      personal_social_history: '',
      obstetric_gynecologic_history: '',
      blood_pressure: '',
      hr: undefined,
      spo2: undefined,
      temperature: undefined,
      physical_examination: '',
      imaging_findings: '',
      laboratory: '',
      diagnosis: '',
      initial_management: '',
      surgical_plan: '',
      created_at: new Date().toISOString(),
    },
  });

  // Fetch patients on component mount
  useEffect(() => {
    const fetchPatients = async () => {
      const { data, error } = await supabase
        .from('patients')
        .select('id, first_name, last_name, hospital_registration_number');
      if (error) {
        console.error('Error fetching patients:', error);
      } else {
        setPatients(data || []);
      }
    };
    fetchPatients();
  }, []);

useEffect(() => {
  async function fetchAdmission() {
    if (!id) return;
    const { data } = await supabase.from('admissions').select('*').eq('id', id).single();
    if (data) {
      setAdmission(data as z.infer<typeof formSchema>);
      // Explicitly map each field to avoid type issues and guarantee correct population
      form.reset({
        patient_id: data.patient_id ?? '',
        status: data.status ?? 'admitted',
        surgery_done: data.surgery_done ?? '',
        surgery_done_at: data.surgery_done_at ? new Date(data.surgery_done_at) : undefined,
        remarks: data.remarks ?? '',
        severity: data.severity ?? 'ELECTIVE',
        chief_complaint: data.chief_complaint ?? '',
        nature_of_injury: data.nature_of_injury ?? '',
        date_of_injury: data.date_of_injury ? new Date(data.date_of_injury) : new Date(),
        time_of_injury: data.time_of_injury ?? '',
        place_of_injury: data.place_of_injury ?? '',
        history_of_present_illness: data.history_of_present_illness ?? '',
        past_medical_history: data.past_medical_history ?? '',
        personal_social_history: data.personal_social_history ?? '',
        obstetric_gynecologic_history: data.obstetric_gynecologic_history ?? '',
        blood_pressure: data.blood_pressure ?? '',
        hr: data.hr ?? undefined,
        spo2: data.spo2 ?? undefined,
        temperature: data.temperature ?? undefined,
        physical_examination: data.physical_examination ?? '',
        imaging_findings: data.imaging_findings ?? '',
        laboratory: data.laboratory ?? '',
        diagnosis: data.diagnosis ?? '',
        initial_management: data.initial_management ?? '',
        surgical_plan: data.surgical_plan ?? '',
        created_at: data.created_at ?? new Date().toISOString(),
      });
      // Fetch patient
      const { data: patientData } = await supabase.from('patients').select('*').eq('id', data.patient_id).single();
      if (patientData) setSelectedPatient(patientData as Patient);
    }
  }
  fetchAdmission();
}, [id, form]);

useEffect(() => {
  if (selectedPatient) {
    form.setValue('patient_id', selectedPatient.id);
  }
}, [selectedPatient, form]);

  const handlePatientAdded = (newPatient: { id: string; first_name: string; last_name: string; hospital_registration_number: string | null; }) => {
    // Add the new patient to the local state
    setPatients(prevPatients => [
      ...prevPatients,
      newPatient // Directly add the complete patient object
    ]);
    // Set the newly added patient as the selected value in the dropdown
    setSelectedPatient(newPatient);
  };

  // 2. Define a submit handler.
  async function onSubmit(values: z.infer<typeof formSchema>) {
    // Convert all values to correct types and ensure all fields are present
    const submitValues: Record<string, any> = {
      ...values,
      surgery_done_at: values.surgery_done_at
        ? (typeof values.surgery_done_at === 'string' ? values.surgery_done_at : values.surgery_done_at.toISOString().slice(0, 10))
        : null,
      date_of_injury: values.date_of_injury instanceof Date
        ? values.date_of_injury.toISOString().slice(0, 10)
        : values.date_of_injury,
      hr: values.hr ?? null,
      spo2: values.spo2 ?? null,
      temperature: values.temperature ?? null,
    };
    // Ensure all fields from schema are present
    Object.keys(formSchema.shape).forEach(key => {
      if (!(key in submitValues)) submitValues[key] = '';
    });
    if (id) {
      // Update existing admission
      const { error } = await supabase
        .from('admissions')
        .update(submitValues)
        .eq('id', id);
      if (error) {
        toast.error('Error updating admission: ' + error.message);
      } else {
        toast.success('Admission updated successfully!');
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    } else {
      // Create new admission
      const { error } = await supabase
        .from('admissions')
        .insert([submitValues]);
      if (error) {
        toast.error('Error creating admission: ' + error.message);
      } else {
        toast.success('Admission created successfully!');
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-5xl">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">

            {/* Section: Admission & Patient Details */}
            <div className="space-y-6">
              <h2 className="text-2xl font-semibold text-gray-700 border-b pb-2">Admission & Patient Details</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

                {/* Patient ID (Dropdown with Quick Add) */}
                <FormField
                  control={form.control}
                  name="patient_id"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Patient</FormLabel>
                      <div className="flex items-center space-x-2">
                        <Select
                          onValueChange={field.onChange}
                          value={typeof field.value === 'string' ? field.value : ''}
                        >
                          <FormControl>
                            <SelectTrigger className="flex-grow">
                              <SelectValue placeholder="Select a patient" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {patients.length === 0 && (
                              <SelectItem value="no_data" disabled>No patients found. Add one!</SelectItem>
                            )}
                            {patients.map((patient) => (
                              <SelectItem key={patient.id} value={patient.id}>
                                {patient.first_name} {patient.last_name} {patient.hospital_registration_number ? `(#${patient.hospital_registration_number})` : ''}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <Button
                          type="button"
                          variant="outline"
                          size="icon"
                          onClick={() => setIsAddPatientModalOpen(true)}
                          title="Add New Patient"
                        >
                          <PlusCircle className="h-4 w-4" />
                        </Button>
                      </div>
                      <FormDescription>
                        Select an existing patient or add a new one.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Status (Select) */}
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={typeof field.value === 'string' ? field.value : 'admitted'}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="ADMITTED">Admitted</SelectItem>
                          <SelectItem value="DISCHARGED">Discharged</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>The current admission status.</FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Severity (Select) */}
                <FormField
                  control={form.control}
                  name="severity"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Severity</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={typeof field.value === 'string' ? field.value : 'ELECTIVE'}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select severity" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="ELECTIVE">Elective</SelectItem>
                          <SelectItem value="STAT">STAT</SelectItem>
                          <SelectItem value="DTOR">DTOR</SelectItem>
                          <SelectItem value="RB">RB</SelectItem>
                          <SelectItem value="POST-OP/MGH">Post-op/MGH</SelectItem>
                          <SelectItem value="THOC">THOC</SelectItem>
                          <SelectItem value="TOS">TOS</SelectItem>
                          <SelectItem value="HAMA">HAMA</SelectItem>
                          <SelectItem value="EXPIRED">Expired</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Severity/status of the surgery or admission.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Surgery Done (Input - was Checkbox) */}
                <FormField
                  control={form.control}
                  name="surgery_done"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Surgery Done</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Information about the surgery..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Information about the surgery performed on the patient.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Surgery Date (Date Picker) */}
                <FormField
                  control={form.control}
                  name="surgery_done_at"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Surgery Date</FormLabel>
                      <FormControl>
                        <Input
                          type="date"
                          value={field.value instanceof Date ? field.value.toISOString().slice(0, 10) : (typeof field.value === 'string' ? field.value : '')}
                          onChange={e => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}
                        />
                      </FormControl>
                      <FormDescription>
                        Date when the surgery was performed.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Remarks (Textarea - spans both columns) */}
                <FormField
                  control={form.control}
                  name="remarks"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Remarks</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Any additional remarks..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        General remarks about the admission.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* Section: Chief Complaint & Injury Details */}
            <div className="space-y-6">
              <h2 className="text-2xl font-semibold text-gray-700 border-b pb-2">Chief Complaint & Injury Details</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Chief Complaint (Textarea - spans both columns) */}
                <FormField
                  control={form.control}
                  name="chief_complaint"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Chief Complaint</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Describe the patient's main complaint..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        The primary reason for the patient's visit.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Nature of Injury (Textarea - spans both columns) */}
                <FormField
                  control={form.control}
                  name="nature_of_injury"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Nature of Injury</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Describe the nature of the injury..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Details about the type and characteristics of the injury.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Date of Injury (Date Picker) */}
                <FormField
                  control={form.control}
                  name="date_of_injury"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Date of Injury</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={'outline'}
                              className={cn(
                                'w-full pl-3 text-left font-normal',
                                !field.value && 'text-muted-foreground'
                              )}
                            >
                              {field.value instanceof Date ? (
                                format(field.value, 'PPP')
                              ) : (
                                <span>Pick a date</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value instanceof Date ? field.value : undefined}
                            onSelect={field.onChange}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                      <FormDescription>
                        The date when the injury occurred.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Time of Injury (Input type="time") */}
                <FormField
                  control={form.control}
                  name="time_of_injury"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Time of Injury</FormLabel>
                      <FormControl>
                        <Input
                          type="time"
                          value={typeof field.value === 'string' && /^([01]\d|2[0-3]):([0-5]\d)$/.test(field.value) ? field.value : ''}
                          onChange={e => {
                            // Allow empty or valid HH:MM (24-hour) format
                            const val = e.target.value;
                            if (val === '' || /^([01]\d|2[0-3]):([0-5]\d)$/.test(val)) {
                              field.onChange(val);
                            }
                          }}
                        />
                      </FormControl>
                      <FormDescription>
                        The approximate time when the injury occurred (HH:MM, 24-hour format).
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Place of Injury (Input) */}
                <FormField
                  control={form.control}
                  name="place_of_injury"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Place of Injury</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="e.g., Home, Work, Public place"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Where the injury took place.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* Section: Medical History */}
            <div className="space-y-6">
              <h2 className="text-2xl font-semibold text-gray-700 border-b pb-2">Medical History</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* History of Present Illness (Textarea - spans both columns) */}
                <FormField
                  control={form.control}
                  name="history_of_present_illness"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>History of Present Illness (HPI)</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Detail the history of the current illness..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        A chronological account of the patient's current illness.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Past Medical History (Textarea - spans both columns) */}
                <FormField
                  control={form.control}
                  name="past_medical_history"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Past Medical History (PMH)</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="List past medical conditions, surgeries, hospitalizations..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Previous medical conditions and treatments.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Personal Social History (Textarea) */}
                <FormField
                  control={form.control}
                  name="personal_social_history"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Personal & Social History (PSH)</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Include lifestyle, habits, occupation, living situation..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Information about the patient's social and personal life.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Obstetric Gynecologic History (Textarea) */}
                <FormField
                  control={form.control}
                  name="obstetric_gynecologic_history"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Obstetric & Gynecologic History (OGH)</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Relevant history for female patients..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Specific history for female patients.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* Section: Vital Signs */}
            <div className="space-y-6">
              <h2 className="text-2xl font-semibold text-gray-700 border-b pb-2">Vital Signs</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Blood Pressure (Input) */}
                <FormField
                  control={form.control}
                  name="blood_pressure"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Blood Pressure</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="e.g., 120/80 mmHg"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Patient's blood pressure reading.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* HR (Input type="number") */}
                <FormField
                  control={form.control}
                  name="hr"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Heart Rate (HR)</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          placeholder="e.g., 72"
                          {...field}
                          value={safeNumberInputValue(field.value)}
                          onChange={event => field.onChange(event.target.value === '' ? undefined : Number(event.target.value))}
                        />
                      </FormControl>
                      <FormDescription>
                        Patient's heart rate in beats per minute.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* SpO2 (Input type="number") */}
                <FormField
                  control={form.control}
                  name="spo2"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>SpO2 (%)</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          placeholder="e.g., 98"
                          {...field}
                          value={safeNumberInputValue(field.value)}
                          onChange={event => field.onChange(event.target.value === '' ? undefined : Number(event.target.value))}
                        />
                      </FormControl>
                      <FormDescription>
                        Oxygen saturation percentage.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Temperature (Input type="number") */}
                <FormField
                  control={form.control}
                  name="temperature"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Temperature (°C)</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          step="0.1"
                          placeholder="e.g., 37.0"
                          {...field}
                          value={safeNumberInputValue(field.value)}
                          onChange={event => field.onChange(event.target.value === '' ? undefined : Number(event.target.value))}
                        />
                      </FormControl>
                      <FormDescription>
                        Patient's body temperature.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* Section: Clinical Findings & Management */}
            <div className="space-y-6">
              <h2 className="text-2xl font-semibold text-gray-700 border-b pb-2">Clinical Findings & Management</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Physical Examination (Textarea - spans both columns) */}
                <FormField
                  control={form.control}
                  name="physical_examination"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Physical Examination Findings</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Document physical examination findings..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Detailed findings from the physical examination.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Imaging Findings (Textarea) */}
                <FormField
                  control={form.control}
                  name="imaging_findings"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Imaging Findings</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Summarize findings from imaging studies (X-ray, MRI, CT)..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Results from radiology and imaging.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Laboratory (Textarea) */}
                <FormField
                  control={form.control}
                  name="laboratory"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Laboratory Results</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Summarize relevant laboratory test results..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Key findings from laboratory tests.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Diagnosis (Textarea - spans both columns) */}
                <FormField
                  control={form.control}
                  name="diagnosis"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Diagnosis</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Enter the patient's diagnosis..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        The medical diagnosis for the patient's condition.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Initial Management (Textarea) */}
                <FormField
                  control={form.control}
                  name="initial_management"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Initial Management</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Describe the immediate management steps taken..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        First steps taken for patient care.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Surgical Plan (Textarea) */}
                <FormField
                  control={form.control}
                  name="surgical_plan"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Surgical Plan</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Outline the surgical plan, if applicable..."
                          className="resize-y"
                          {...field}
                          value={typeof field.value === 'string' ? field.value : ''}
                        />
                      </FormControl>
                      <FormDescription>
                        Details of any planned surgical procedures.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
            <Button type="submit" variant="outline" className="w-full">Submit Admission</Button>
          </form>
        </Form>
      </div>

      {/* Add Patient Modal */}
      <AddPatientModal
        isOpen={isAddPatientModalOpen}
        onClose={() => setIsAddPatientModalOpen(false)}
        onPatientAdded={handlePatientAdded}
      />
    </div>
  );
}

function safeNumberInputValue(val: any) {
  if (typeof val === 'number') return val;
  if (typeof val === 'string') return val;
  return '';
}
